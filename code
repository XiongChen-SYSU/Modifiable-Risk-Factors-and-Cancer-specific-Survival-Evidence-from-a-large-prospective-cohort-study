#data preparation
#EWAS----------------
#data 

#exposure defined
 
#covariate defined

##Examining the collinearity relationship between variables and covariates.

findcorrelation<-cor(var_findcorrelation,method="spearman")
findcorrelation<-as.data.frame(findcorrelation) 

#Model1(PH test):

Covariate=paste0(covariate,collapse="+")

library(survival)  

Uni_glm_model=
  function(x){
    FML=as.formula(paste0("Surv(time,status)~",x,"+",Covariate))
    glm1=coxph(FML,data=df) 
    GSum<- summary(glm1)
    coef=GSum$coefficients[,1]
    HR<- round(GSum$coefficients[,2],4)
    se=GSum$coefficients[,3]
    CI5=round(exp(coef-1.96*se),4)
    CI95=round(exp(coef+1.96*se),4)
    Pvalue<- round(GSum$coefficients[,5],6)
    p=GSum$coefficients[,5]
    instance=p
    if (class(df[[x]])=="factor") {
      instance[1:(length(levels(df[[x]]))-1)]=as.data.frame(table(df[[x]]))[[2]][2:length(levels(df[[x]]))] 
    } 
    if (class(df[[x]])!="factor") {
      instance[1]=NA 
    }
    full=p
    full[!is.na(full)]=length(na.omit(df[[x]])) 
    Field=p
    Field[!is.na(Field)]=x
    Field=p
    Field[!is.na(Field)]=x
    ## PH test
    PH_test=cox.zph(glm1,transform = "km")
    P_value_for_Schoenfeld_residuals=p
    if (class(df[[x]])=="factor") {
      P_value_for_Schoenfeld_residuals[1:(length(levels(df[[x]]))-1)]=as.data.frame(PH_test$table)[[3]][1]
    } 
    if (class(df[[x]])!="factor") {
      P_value_for_Schoenfeld_residuals[1]= as.data.frame(PH_test$table)[[3]][1]
    }
    
    Uni_glm_model=cbind(Field,coef,HR,se,CI5,CI95,p,instance,full,P_value_for_Schoenfeld_residuals)
    Uni_glm_model=as.data.frame(Uni_glm_model)
    dimnames(Uni_glm_model)[[2]]=c("FieldID","coef","HR","se","CI5","CI95","Pvalue","case","full_sample","P-value for Schoenfeld residuals")
    return(Uni_glm_model) 
  } 

Uni_glm=vector(mode="list",length=length(Exposures_Final))

Uni_glm=lapply(c(Exposures_Final),Uni_glm_model)   



#model2: for those factors not passed the PH test.
library(survival)
Uni_glm_model2=
  function(x){
    FML=as.formula(paste0("Surv(time,status)~",x,"+",Covariate,"+","tt(",x,")"))
    glm1=coxph(FML,data=df,tt=function(x, t,...) x*log(t+2))
    GSum<- summary(glm1)
    coef=GSum$coefficients[,1]
    se=GSum$coefficients[,3]
    Pvalue<- round(GSum$coefficients[,5],6)
    p=GSum$coefficients[,5]
    Field=p
    Field[!is.na(Field)]=x
    Uni_glm_model2=cbind(Field,coef,se,Pvalue)
    Uni_glm_model2=as.data.frame(Uni_glm_model2)
    dimnames(Uni_glm_model2)[[2]]=c("Field ID","coef","se","Pvalue")
    return(Uni_glm_model2) 
  } 
Uni_glm2=vector(mode="list",length=length(ph_variables))
Uni_glm2=lapply(ph_variables,Uni_glm_model2) 

#单HR，95%CI
HR=exp(coef(var)+coef(tt)*log(t+2))
CI5=exp(coef(var)+coef(tt)*log(t+2)-1.96*se)
CI95=exp(coef(var)+coef(tt)*log(t+2)+1.96*se)



#MR-------------------

#exposureID

library(TwoSampleMR)
exposure <- extract_instruments(outcomes = exposureID)

outcome <- extract_outcome_data(snps = exposure$SNP,outcomes = "finn-b-DEATH")

dat <- harmonise_data(exposure_dat = exposure,outcome_dat = outcome)

res <- mr(dat)
View(res)
p <- mr_pleiotropy_test(dat)
View(p)
h <- mr_heterogeneity(dat)


res_sig<-subset(res,res$pval<0.05)
p_sig<-subset(p,p$pval<0.05)
h_sig<-subset(h,h$Q_pval<0.05)
MR_Sig<-setdiff(res_sig$exposure,p_sig$exposure)
MR_Sig<-setdiff(MR_Sig,h_sig$exposure)


#individual's weighted score in each domains--------------------------
#fore example
Diet<-subset(all_sig,all_sig$cluster=="1")
Diet<-rownames(Diet)

Diet_df<-dmy_df[,c("V_eid",Diet)]

Diet_sig_continuous<-intersect(Diet,continous_variables)

Diet_df[,Diet_sig_continuous]<-ifelse(Diet_df[,Diet_sig_continuous]<=0,0,1)

str(Diet_df)
#if the factor were divided into segments, both or more segments of this factors should be paid attention to(whether it is significant). 

# For HR less than 1, change the levels to make them risk factors
Protective_exposures<-subset(all_sig[Diet,],all_sig[Diet,]$HR<1)
Protective_exposures<-rownames(Protective_exposures)

Diet_df[,Protective_exposures]<-ifelse(Diet_df[,Protective_exposures]==0,1,0)

Diet_df$Diet_unweighted<-rowSums(Diet_df[,2:ncol(Diet_df)],na.rm = T)

# note:if the factor were divided into segments, both or more segments of this factors should be paid attention to(whether it is significant).
# na was produce for the factor divided into segments.how to score the na should based on the RCS.
Diet_df_weighted<-Diet_df[2:ncol(Diet_df)]
Diet_df_weighted[is.na(Diet_df_weighted)]<-0
coef<- abs(all_sig[Diet,]$coef)

Diet_df_weighted=as.matrix(Diet_df_weighted)
Diet_df_weighted=Diet_df_weighted%*%diag(coef)
Diet_df_weighted=as.data.frame(Diet_df_weighted)

Diet_df$Diet_weighted<-rowSums(Diet_df_weighted[,1:ncol(Diet_df_weighted)],na.rm = T)

Diet_df$Diet_unweighted_3<-cut(Diet_df$Diet_unweighted,breaks = quantile(Diet_df$Diet_unweighted,probs = c(0,0.33,0.66,1),na.rm = T),labels=c("Favourable","Intermediate","Unfavourable"),include.lowest = TRUE)

Diet_df$Diet_weighted_3<-cut(Diet_df$Diet_weighted,breaks = quantile(Diet_df$Diet_weighted,probs = c(0,0.33,0.66,1),na.rm = T),labels=c("Favourable","Intermediate","Unfavourable"),include.lowest = TRUE)


#Joint effect-----------------
#based on three profiles: "Favourable","Intermediate","Unfavourable"
FML<-as.formula(paste0("Surv(time,status)~",weighted,"+",Covariate))
library(survival)
multi_cox<-coxph(FML,data=Joint_df)
multi_res<-summary(multi_cox)
coef=multi_res$coefficients[,1]
HR<- round(multi_res$coefficients[,2],4)
se=multi_res$coefficients[,3]
CI5=round(exp(coef-1.96*se),4)
CI95=round(exp(coef+1.96*se),4)
Pvalue<- round(multi_res$coefficients[,5],6)
Cox_weighted<-cbind(coef,HR,se,CI5,CI95,Pvalue)
Cox_weighted<-as.data.frame(Cox_weighted_nointeraction)

#P for trend was calculated based on the scores.

#interaction
library(Publish)
FML<-as.formula(paste0("Surv(time,status)~",weighted,"+",Covariate))
multi_cox<-coxph(FML,data=Joint_df)
sub_cox_Diet_sex<-subgroupAnalysis(multi_cox,Joint_df,treatment="Diet_weighted_3",
                                    subgroups="sex")


#PAF-----------------------------
##Model1
##Model1
Model_df1<-Joint_df[,c(Joint_weighted_var,covariate,"5years")]

colnames(Model_df1)[1:5]=c("Diet","Daily_activity","SA_exposure","Mental_health","physical_measure")

for(i in 1:5) {
  levels(Model_df1[[i]])=list("1"="Favourable","1"="Intermediate","2"="Unfavourable")
}

str(Model_df1)
for (i in 1:5) {
  Model_df1[[i]]=as.integer(Model_df1[[i]])
}

install.packages("stdReg")
library(stdReg)
AF=function(est){
  p=est[1]
  p0=est[2]
  af=1-p0/p
  return(af)
}
Uni_glm_model=
  function(y){
    FML=as.formula(paste0("5years~",y,"+",Covariate))
    glm1=glm(FML,data=Model_df1,family="binomial") 
    fit.std <- stdGlm(fit=glm1, data=Model_df1, X=y, x=c(NA,1)) # c(NA,0) is the value of the OR>1 variable, NA is the factual distribution, and 0 is the counterfactual distribution; The specific value of X to be written in x=c() is not necessarily 0
    AFest=AF(fit.std$est)
    a=confint(object = fit.std,fun = AF,level = 0.95)
    glm2=summary(glm1) # summary glm1
    OR=round(exp(coef(glm1)),4) # OR
    SE=coef(glm2)[,2] 
    CI5=round(exp(coef(glm1)-1.96*SE),4)
    CI95=round(exp(coef(glm1)+1.96*SE),4)
    P=coef(glm2)[,4]
    Uni_glm_model=data.frame('predictors'=y,'AF'=AFest,'CI_L'=a[1],'CI_U'=a[2],'OR'=OR,'CI5'=CI5,'CI95'=CI95,'P'=P)[-1,]
    return(Uni_glm_model)
  }

Joint_var=c("Diet","Daily_activity","SA_exposure","Mental_health","physical_measure")

Uni_glm=vector(mode="list",length=length(Joint_var))
Uni_glm=lapply(Joint_var,Uni_glm_model)

model1<-Uni_glm[[1]]
for( i in 2:5){
  model1<-model1[rev(rownames(model1)),]
  model1<-model1[-c(1:14),]
  model1<-rbind(model1,Uni_glm[[i]])
}
model1<-model1[-c(6:19),]

# weighted PAF (communality calculation)
# Generate a correlation matrix
install.packages("psych")
library(psych)

correlation=tetrachoric(Model_df1[c(Joint_var)],na.rm=T)
cor=correlation$rho # Correlation coefficient matrix
cor.plot(cor)
dev.off()

# eigenvalues and eigenvectors
ev=eigen(cor) 
val=ev$values # eigenvalues
U=as.matrix(ev$vectors) # eigenvectors
which(val>1)
U=U[,1] # retain eigenvalues>1

# communality
U=as.data.frame(U)
U$communality=0
for (i in 1:nrow(U)) {
  a <- U$U[i]
  U$communality[i]=sum(a^2)
} 
name=colnames(Model_df1)[c(1:5)]
U$predictors=name

# combine with the result of PAF
communality=U
PAF=model1
communality=U[,c("communality","predictors")]
PAF=left_join(PAF,communality,by="predictors")



# overall adjusted PAF
a=1-(1-PAF$communality)*PAF$AF
b=cumprod(a)[length(a)]
overall_PAF=1-b    # 0.4035402
PAF$overall_PAF<-overall_PAF
# single adjusted PAF
PAF$weighted_PAF=(PAF$AF/sum(PAF$AF))*overall_PAF



#Model2
Model_df2<-Joint_df[,c(Joint_weighted_var,covariate,"5years")]

colnames(Model_df2)[1:5]=c("Diet","Daily_activity","SA_exposure","Mental_health","physical_measure")

for(i in 1:5) {
  levels(Model_df2[[i]])=list("1"="Favourable","2"="Intermediate","2"="Unfavourable")
}
str(Model_df2)

for (i in 1:5) {
  Model_df2[[i]]=as.integer(Model_df2[[i]])
}

install.packages("stdReg")
library(stdReg)
AF=function(est){
  p=est[1]
  p0=est[2]
  af=1-p0/p
  return(af)
}

Uni_glm_model=
  function(y){
    FML=as.formula(paste0("OS_5years~",y,"+",Covariate))
    glm1=glm(FML,data=Model_df2,family="binomial") 
    fit.std <- stdGlm(fit=glm1, data=Model_df2, X=y, x=c(NA,1)) # c(NA,0) is the value of the OR>1 variable, NA is the factual distribution, and 0 is the counterfactual distribution; The specific value of X to be written in x=c() is not necessarily 0
    AFest=AF(fit.std$est)
    a=confint(object = fit.std,fun = AF,level = 0.95)
    glm2=summary(glm1) # summary glm1
    OR=round(exp(coef(glm1)),4) # OR
    SE=coef(glm2)[,2] 
    CI5=round(exp(coef(glm1)-1.96*SE),4)
    CI95=round(exp(coef(glm1)+1.96*SE),4)
    P=coef(glm2)[,4]
    Uni_glm_model=data.frame('predictors'=y,'AF'=AFest,'CI_L'=a[1],'CI_U'=a[2],'OR'=OR,'CI5'=CI5,'CI95'=CI95,'P'=P)[-1,]
    return(Uni_glm_model)
  }

Joint_var=c("Diet","Daily_activity","SA_exposure","Mental_health","physical_measure")

Uni_glm=vector(mode="list",length=length(Joint_var))
Uni_glm=lapply(Joint_var,Uni_glm_model)

model2<-Uni_glm[[1]]
for( i in 2:5){
  model2<-model2[rev(rownames(model2)),]
  model2<-model2[-c(1:14),]
  model2<-rbind(model2,Uni_glm[[i]])
}
model2<-model2[-c(6:19),]

# weighted PAF (communality calculation)
# Generate a correlation matrix
install.packages("psych")
library(psych)

correlation=tetrachoric(Model_df2[c(Joint_var)],na.rm=T)
cor=correlation$rho # Correlation coefficient matrix
cor.plot(cor)
dev.off()

# eigenvalues and eigenvectors
ev=eigen(cor) 
val=ev$values # eigenvalues
U=as.matrix(ev$vectors) # eigenvectors

which(val>1)
U=U[,1] # retain eigenvalues>1

# communality
# communality
U=as.data.frame(U)
U$communality=0
for (i in 1:nrow(U)) {
  a <- U$U[i]
  U$communality[i]=sum(a^2)
} 
name=colnames(Model_df2)[c(1:5)]
U$predictors=name

# combine with the result of PAF
communality=U
PAF=model2
communality=U[,c("communality","predictors")]

PAF=left_join(PAF,communality,by="predictors")


# overall adjusted PAF
a=1-(1-PAF$communality)*PAF$AF
b=cumprod(a)[length(a)]
overall_PAF=1-b    
PAF$overall_PAF<-overall_PAF
# single adjusted PAF
PAF$weighted_PAF=(PAF$AF/sum(PAF$AF))*overall_PAF

